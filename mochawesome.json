{
  "stats": {
    "suites": 2,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2024-07-14T16:41:47.219Z",
    "end": "2024-07-14T16:42:22.594Z",
    "duration": 35375
  },
  "results": [
    {
      "uuid": "ece42bd2-d404-4d08-918c-4e802dba68b6",
      "title": "",
      "fullFile": "cypress\\e2e\\testWithPageObjects.js",
      "file": "cypress\\e2e\\testWithPageObjects.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9a9cb1ed-b573-4f11-8ef9-c6e2f715eebe",
          "title": "Test with page objects",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should submit inline form and Basic form and select tomorrows date in calendar",
              "fullTitle": "Test with page objects Should submit inline form and Basic form and select tomorrows date in calendar",
              "timedOut": null,
              "duration": 7496,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "navigateTo.formLayoutsPage();\nonFormLayoutsPage.submitInlineFormWithNameAndEmail('John Smith', 'test@email.com');\nonFormLayoutsPage.submitBasicFormWithEmailAndPassword('test@email.com', 'password');\ncy.wait(500);\nnavigateTo.datePickerPage();\nonDatePickerPage.enterCommonDatePickerDateDaysAfterTodaysDate(60);",
              "err": {},
              "uuid": "14fedaa3-1744-4281-958b-3c0336f282e0",
              "parentUUID": "9a9cb1ed-b573-4f11-8ef9-c6e2f715eebe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14fedaa3-1744-4281-958b-3c0336f282e0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7496,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0f35cc60-4884-4931-b237-88cd1d604477",
      "title": "",
      "fullFile": "cypress\\e2e\\firstTest.spec.js",
      "file": "cypress\\e2e\\firstTest.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
          "title": "First suite test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "First test",
              "fullTitle": "First suite test First test",
              "timedOut": null,
              "duration": 2205,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Form Layouts').click();",
              "err": {},
              "uuid": "77e5fddb-4a32-4706-a0b4-0421ef66fb64",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Locator techniques and methods",
              "fullTitle": "First suite test Locator techniques and methods",
              "timedOut": null,
              "duration": 1142,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Form Layouts').click();\ncy.contains('Sign in');\n//Finding 2nd Sign in button in 'Horizontal form' section based on Email input box\ncy.get('#inputEmail3').parents('form').find('button').should('contain', 'Sign in');\ncy.contains('nb-card', 'Horizontal form').get('button');",
              "err": {},
              "uuid": "cd053a42-e9a7-43ea-abec-3a3ac98f3ae5",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate Submit button in Block Form",
              "fullTitle": "First suite test Validate Submit button in Block Form",
              "timedOut": null,
              "duration": 1141,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Form Layouts').click();\ncy.contains('Basic form').parent('nb-card').find('form').find('button').should('contain', 'Submit');",
              "err": {},
              "uuid": "db429344-b6a8-4492-aa82-3d765c8a3531",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Save subject of the command",
              "fullTitle": "First suite test Save subject of the command",
              "timedOut": null,
              "duration": 1582,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Form Layouts').click();\ncy.contains('nb-card', 'Using the Grid').find('[for=\"inputEmail1\"]').should('contain', 'Email');\ncy.contains('nb-card', 'Using the Grid').find('[for=\"inputPassword2\"]').should('contain', 'Password');\n//Instead use alias for common element in this case 'Using the grid'\n//-- 1) Using cyprus alias\ncy.contains('nb-card', 'Using the Grid').as('usingTheGrid');\ncy.get('@usingTheGrid').find('[for=\"inputEmail1\"]').should('contain', 'Email');\ncy.get('@usingTheGrid').find('[for=\"inputPassword2\"]').should('contain', 'Password');\n//-- 2) Using then()\ncy.contains('nb-card', 'Using the Grid').then(usingTheGrid => {\n  cy.wrap(usingTheGrid).find('[for=\"inputEmail1\"]').should('contain', 'Email');\n  cy.wrap(usingTheGrid).find('[for=\"inputPassword2\"]').should('contain', 'Password');\n});",
              "err": {},
              "uuid": "3639b7fb-8dbc-4cc3-ad53-b7bcfd760f33",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Extracting text values",
              "fullTitle": "First suite test Extracting text values",
              "timedOut": null,
              "duration": 2020,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Form Layouts').click();\ncy.contains('nb-card-header', 'Block form').parent('nb-card').children('nb-card-body').as('blockFormBody');\nlet firstNameText = '';\ncy.get('@blockFormBody').find('label[for=\"inputFirstName\"]').then(firstNameLabel => {\n  firstNameText = firstNameLabel.text();\n  //Since firstNameText is a JQueryElement, we can use Chai assertions. 'expect'\n  expect(firstNameText).to.equal('First Name');\n  //Or if we want to use cypress assetions we can use cy wrap\n  cy.wrap(firstNameText).should('contain', 'First Name');\n});\n//Another approach is using 'invoke' method\ncy.get('@blockFormBody').find('label[for=\"inputFirstName\"]').invoke('text').should('contain', 'First Name');\ncy.get('@blockFormBody').find('label[for=\"inputFirstName\"]').invoke('text').then(text => {\n  expect(text).to.equal('First Name');\n});\n//To use a value later even after performing assertion, we can use 'as' to store it into an alias\ncy.get('@blockFormBody').find('label[for=\"inputFirstName\"]').invoke('text').as('firstNameText').should('contain', 'First Name');\ncy.get('@firstNameText').then(text => {\n  expect(text).to.equal('First Name');\n});",
              "err": {},
              "uuid": "772857b8-bcbe-4103-a67a-d387edec2a4b",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Typing text into input field and validating it",
              "fullTitle": "First suite test Typing text into input field and validating it",
              "timedOut": null,
              "duration": 1298,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Form Layouts').click();\n//Type the value\ncy.get('#inputEmail1').type('test@email.com');\n//Get the value\ncy.get('#inputEmail1').invoke('prop', 'value').should('contain', 'test@email.com');\ncy.get('#inputEmail1').invoke('prop', 'value').then(inputValue => {\n  expect(inputValue).to.equal('test@email.com');\n});",
              "err": {},
              "uuid": "86e0aef9-485a-47d1-af72-a318169f3932",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Use invoke to get webelement attribute and type",
              "fullTitle": "First suite test Use invoke to get webelement attribute and type",
              "timedOut": null,
              "duration": 922,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Form Layouts').click();\n//Check if element class attribute is 'input'\ncy.get('#inputEmail1').invoke('attr', 'class').should('contain', 'input');",
              "err": {},
              "uuid": "e434a896-b6a9-4583-a317-9a788cefb13e",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Radio boxes",
              "fullTitle": "First suite test Radio boxes",
              "timedOut": null,
              "duration": 1362,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Form Layouts').click();\n//Selecting all radio boxes\ncy.contains('nb-card', 'Using the Grid').as('usingTheGrid');\ncy.get('@usingTheGrid').find('[type=\"radio\"]').then(radioButtons => {\n  cy.wrap(radioButtons).eq(0).check({\n    force: true\n  }).should('be.checked');\n  cy.wrap(radioButtons).eq(1).check({\n    force: true\n  }).should('be.checked');\n  cy.wrap(radioButtons).eq(0).should('not.be.checked');\n  cy.wrap(radioButtons).eq(2).should('be.disabled');\n});",
              "err": {},
              "uuid": "30b0fdc7-4342-4f46-8669-4ea30c0f428c",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check boxes",
              "fullTitle": "First suite test Check boxes",
              "timedOut": null,
              "duration": 1544,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Modal & Overlays').click();\ncy.contains('Toastr').click();\n//Selecting all radio boxes\n//cy.get('[type=\"checkbox\"]').check({force: true}).should('be.checked')\n//Selecting individual\ncy.contains('Prevent arising of duplicate toast').find('[type=\"checkbox\"]').check({\n  force: true\n}).should('be.checked');",
              "err": {},
              "uuid": "7861187c-44f0-40ea-88f2-a4eecdb1c7c9",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Date picker",
              "fullTitle": "First suite test Date picker",
              "timedOut": null,
              "duration": 1723,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "function selectDayFromCurrent(numberOfDays) {\n  let days = numberOfDays;\n  let daysAfterDate = new Date();\n  daysAfterDate.setDate(daysAfterDate.getDate() + days);\n  let inputDate = daysAfterDate.getDate();\n  let inputMonth = daysAfterDate.toLocaleDateString('en-US', {\n    month: 'short'\n  });\n  let inputYear = daysAfterDate.getFullYear();\n  let dateToAssert = `${inputMonth} ${inputDate}, ${inputYear}`;\n  console.log('Date to assert: ' + dateToAssert);\n  cy.get('nb-calendar-navigation').invoke('attr', 'ng-reflect-date').then(dateAttr => {\n    if (!dateAttr.includes(inputMonth) || !dateAttr.includes(inputYear)) {\n      cy.get('[data-name=\"chevron-right\"]').click();\n      selectDayFromCurrent(numberOfDays);\n    } else {\n      cy.get('.day-cell').not('.bounding-month').contains(inputDate).click();\n    }\n  });\n  return dateToAssert;\n}\ncy.visit('/');\ncy.contains('Forms').click();\ncy.contains('Datepicker').click();\ncy.get('input[placeholder=\"Form Picker\"').click();\ncy.contains('nb-card', 'Common Datepicker').find('input').then(dateInput => {\n  cy.wrap(dateInput).click();\n  const dateToAssert = selectDayFromCurrent(60);\n  cy.wrap(dateInput).invoke('prop', 'value').should('contain', dateToAssert);\n});",
              "err": {},
              "uuid": "bda7e44d-7804-4ec6-be43-99c532e91e28",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Lists and Dropdowns (non-select)",
              "fullTitle": "First suite test Lists and Dropdowns (non-select)",
              "timedOut": null,
              "duration": 1070,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\n//cy.get('nav nb-select').click()\n//In cy.get method we can pass parent and child selector attributes with a space as a single argument instead of using cy.get.find\ncy.get('nav nb-select').then(dropdown => {\n  cy.wrap(dropdown).click();\n  //each method is used for iterating through Cypress Chainable object array. First parameter is the object and 2nd is index\n  cy.get('nb-option').each((option, index) => {\n    cy.wrap(option).click();\n    cy.wrap(dropdown).find('button').should('contain', option.text().trim());\n    if (index < 3) cy.wrap(dropdown).click();\n  });\n});",
              "err": {},
              "uuid": "0904fb9a-6894-477e-9633-90432c37b1eb",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Webtables",
              "fullTitle": "First suite test Webtables",
              "timedOut": null,
              "duration": 6618,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Tables & Data').click();\ncy.contains('Smart Table').click();\n//1. Find row by any column text and perform operations\ncy.get('table').contains('tr', 'Larry').then(larryRow => {\n  cy.wrap(larryRow).find('i.nb-edit').click();\n  cy.wrap(larryRow).find('[placeholder=\"Age\"]').clear().type('35');\n  cy.wrap(larryRow).find('i.nb-checkmark').click();\n  //Validate updated age\n  cy.wrap(larryRow).find('td').eq(6).should('contain', '35');\n});\n//2. Find row by index\ncy.get('table').find('thead tr').eq(1).find('.nb-plus').click();\ncy.get('table').find('thead tr').eq(2).then(tableRow => {\n  cy.wrap(tableRow).find('[placeholder=\"First Name\"]').clear().type('John');\n  cy.wrap(tableRow).find('[placeholder=\"Last Name\"]').clear().type('Smith');\n  cy.wrap(tableRow).find('i.nb-checkmark').click();\n});\ncy.get('table').find('tbody tr').first().then(johnRow => {\n  cy.wrap(johnRow).find('td').eq(2).should('contain', 'John');\n  cy.wrap(johnRow).find('td').eq(3).should('contain', 'Smith');\n});\n//3. Get each row validation\nconst validAgeInputs = [20, 30, 40];\nconst invalidAgeInputs = [200, 300, 400];\nvalidAgeInputs.forEach(age => {\n  cy.get('thead [placeholder=\"Age\"]').clear().type(age + '');\n  cy.wait(500);\n  cy.get('tbody tr').each(tableRow => {\n    cy.wrap(tableRow).find('td').eq(6).should('contain', age + '');\n  });\n});\ninvalidAgeInputs.forEach(age => {\n  cy.get('thead [placeholder=\"Age\"]').clear().type(age + '');\n  cy.wait(500);\n  cy.get('tbody tr').each(tableRow => {\n    cy.wrap(tableRow).should('contain', 'No data found');\n  });\n});",
              "err": {},
              "uuid": "fea3b763-75b6-402d-8463-c18eeb452201",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tooltips",
              "fullTitle": "First suite test Tooltips",
              "timedOut": null,
              "duration": 1832,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Modal & Overlays').click();\ncy.contains('Tooltip').click();\ncy.contains('nb-card', 'Colored Tooltips').contains('Default').click();\ncy.get('nb-tooltip').should('contain', 'This is a tooltip');",
              "err": {},
              "uuid": "766032b1-f87f-4edb-8507-b43b6dd763c9",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Dialog box",
              "fullTitle": "First suite test Dialog box",
              "timedOut": null,
              "duration": 1202,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('/');\ncy.contains('Tables & Data').click();\ncy.contains('Smart Table').click();\n//Stub needs to be created because that way we get exception if stub.getCall() method fails if stub is not created. \n//Thus warning us about alert not getting displayed\nlet stub = cy.stub();\ncy.on('window:confirm', stub);\ncy.get('tbody tr').first().find('.nb-trash').click().then(() => {\n  expect(stub.getCall(0)).to.be.calledWith('Are you sure you want to delete?');\n});\n//To cancel the popup, return false in the on method\ncy.get('tbody tr').first().find('.nb-trash').click();\ncy.on('window:confirm', () => false);",
              "err": {},
              "uuid": "289d5bba-43ab-483b-9d08-8aa3a7b7619d",
              "parentUUID": "9b5c7f39-4cc4-41ab-bd9f-6e74e945023e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "77e5fddb-4a32-4706-a0b4-0421ef66fb64",
            "cd053a42-e9a7-43ea-abec-3a3ac98f3ae5",
            "db429344-b6a8-4492-aa82-3d765c8a3531",
            "3639b7fb-8dbc-4cc3-ad53-b7bcfd760f33",
            "772857b8-bcbe-4103-a67a-d387edec2a4b",
            "86e0aef9-485a-47d1-af72-a318169f3932",
            "e434a896-b6a9-4583-a317-9a788cefb13e",
            "30b0fdc7-4342-4f46-8669-4ea30c0f428c",
            "7861187c-44f0-40ea-88f2-a4eecdb1c7c9",
            "bda7e44d-7804-4ec6-be43-99c532e91e28",
            "0904fb9a-6894-477e-9633-90432c37b1eb",
            "fea3b763-75b6-402d-8463-c18eeb452201",
            "766032b1-f87f-4edb-8507-b43b6dd763c9",
            "289d5bba-43ab-483b-9d08-8aa3a7b7619d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25661,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}